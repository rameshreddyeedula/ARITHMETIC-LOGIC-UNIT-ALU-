// VERILOG OR VHDL CODE FOR ARITHMETIC-LOGIC-UNIT
// Code your design here
module ALU (
    input [3:0] A,      // 4-bit input A
    input [3:0] B,      // 4-bit input B
    input [2:0] ALU_Sel, // Control signal to select operation
    output reg [3:0] ALU_Out,
    output reg CarryOut
);

always @(*) begin
    CarryOut = 0; // Default
    case (ALU_Sel)
        3'b000: {CarryOut, ALU_Out} = A + B;     // Addition
        3'b001: {CarryOut, ALU_Out} = A - B;     // Subtraction
        3'b010: ALU_Out = A & B;                 // AND
        3'b011: ALU_Out = A | B;                 // OR
        3'b100: ALU_Out = ~A;                    // NOT A
        default: ALU_Out = 4'b0000;
    endcase
end








// TESTBENCH CODE FOR ARITHMETIC LOGIC UNIT(ALU)
// Code your testbench here
// or browse Examples
// ------------------- TESTBENCH -------------------
`timescale 1ns / 1ps

module ALU_tb;
    reg [3:0] A;
    reg [3:0] B;
    reg [2:0] ALU_Sel;
    wire [3:0] ALU_Out;
    wire CarryOut;

    // Instantiate the ALU
    ALU uut (
        .A(A),
        .B(B),
        .ALU_Sel(ALU_Sel),
        .ALU_Out(ALU_Out),
        .CarryOut(CarryOut)
    );

    initial begin
        $display("Time\tA\tB\tSel\tResult\tCarryOut");
        $monitor("%g\t%b\t%b\t%b\t%b\t%b", $time, A, B, ALU_Sel, ALU_Out, CarryOut);

        A = 4'b0001; B = 4'b0001; ALU_Sel = 3'b000; #10; // ADD
        A = 4'b0110; B = 4'b0010; ALU_Sel = 3'b001; #10; // SUB
        A = 4'b1011; B = 4'b1101; ALU_Sel = 3'b010; #10; // AND
        A = 4'b1011; B = 4'b1001; ALU_Sel = 3'b011; #10; // OR
        A = 4'b1110; B = 4'b0000; ALU_Sel = 3'b100; #10; // NOT (B ignored)
        $finish;
    end
